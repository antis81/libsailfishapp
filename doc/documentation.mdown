libsailfishapp documentation
============================

To ease development of applications for Sailfish and to make sure paths for the
applications are set correctly, and application startup time is accelerated,
third party applications on Sailfish OS should use libsailfishapp. This library
provides certain convenience functions to set up the project, install all files
into the right directories, and get important paths at runtime via convenience
methods.

This document also serves to describe the functionality of libsailfishapp so
that developers who cannot use libsailfishapp in their projects can use this
document as a guide for how to replicate the directory layout and paths.
However, we generally recommend using libsailfishapp where possible, as it will
allow applications to easily and automatically integrate well with Sailfish OS.


How to use libsailfishapp in your project
-----------------------------------------

To use libsailfishapp in your project:

 1. Add <code>BuildRequires: pkgconfig(sailfishapp)</code> to your .spec file
 2. Set <code>TARGET = harbour-yourappname</code> in your .pro file
 3. Add <code>CONFIG += sailfishapp</code> to your .pro file
 4. Include <code>sailfishapp.h</code> in your .cpp file
 5. Use the <code>SailfishApp::</code> methods in your <code>main()</code>

In the rest of this document, we will refer to the value of the
<code>TARGET</code> variable in your .pro file as <code>$$TARGET</code>
(this is also how you can use the variable itself in the .pro file).

Files that get installed by libsailfishapp, and have to
be present in the same directory as the .pro file:

 * <code>$$TARGET.png</code> - An 86x86 pixel application icon
 * <code>$$TARGET.desktop</code> - The .desktop file for your app
 * <code>qml/</code> - A folder containing all your QML files

If you want to opt out of automatic deployment of the <code>qml/</code>
folder, set <code>CONFIG += sailfishapp_no_deploy_qml</code> before adding
the sailfishapp configuration option. You might want to set this option if
for some reason you intend to ship your QML files as Qt Resources (qrc).
We recommend that you keep the default setup and install QML files in the
filesystem instead.

In case you provide application icon in multiple sizes:

 1. Add <code>SAILFISHAPP_ICONS = size1 size2...</code> to your .pro file,
    enumerating all available icon sizes in form <code>WIDTHxHEIGHT</code>
 2. Ensure all icons are present as <code>icons/WIDTHxHEIGHT/$$TARGET.png</code>
    in the source tree

How to use i18n support in your project
---------------------------------------

To use the internationalization convenience features of libsailfishapp:

 1. In your main .pro file, add:<br><code>CONFIG += sailfishapp_i18n</code>
 <br>If you use id based translations also add:<br><code>CONFIG += sailfishapp_i18n_idbased</code>
 2. Run <code>qmake</code>
 3. Run <code>make</code> (this will create or update the file <code>translations/$APPNAME.ts</code> and all files 
    in TRANSLATIONS)
 4. In your RPM packaging .yaml file, add the following entry to
    the files section:<br><code>- '%{_datadir}/%{name}/translations'</code>

To add a new language to your project:

 1. In your main .pro file, add (with $LANG replaced with the language):
    <br><code>TRANSLATIONS += translations/$APPNAME-$LANG.ts</code>
    (for example, for German, use "$APPNAME-de.ts", etc...)
 2. Run <code>qmake</code>
 3. Run <code>make</code>

If during development you want to skip building the translations
every time, you can simply comment out the line

    CONFIG += sailfishapp_i18n

in your qmake .pro file, and the translations will not be built/updated.
Be sure to re-enable the line when you do the release build.

libsailfishapp C++ API
----------------------

TODO: Describe the API calls libsailfishapp provides

 * How to get the <code>QGuiApplication</code> instance
 * How to create a new <code>QQuickView</code>
 * How to use <code>SailfishApp::pathTo()</code> for file paths
 * How for the most generic case one can use <code>SailfishApp::main()</code>

libsailfishapp QML-only launcher
--------------------------------

TODO: Describe how to build a project without any C++ that can
still access private QML imports and the Sailfish Silica API.

Custom context properties
-------------------------

TODO: Explain where and how to set up custom context properties
so they are exposed in the QML view.

Custom QML types registered at runtime
--------------------------------------

TODO: Describe how one can use <code>qmlRegisterType</code> with
libsailfishapp and the naming requirements for Harbour QA.

Installing and using private shared libraries
---------------------------------------------

TODO: Describe where to install shared libraries, how to link
against them and how libsailfishapp takes care of the rpath

Installing and using private QML imports
----------------------------------------

TODO: Describe where to install private QML imports, how to
import them in QML code, how libsailfishapp sets the import path
and the naming requirements for Harbour QA.

Storing application configuration files
---------------------------------------

To store application configuration files, you can use the standard
<code>QSettings</code> class with the default constructor, which
will use the application and organization name (set correctly by
libsailfishapp to the application name, which is the binary name in
case of C++ applications or the first argument in case of QML-only
applications with the <code>sailfish-qml</code> launcher).

Storing application data and cached files
-----------------------------------------

To store application data, use the location returned by
<code>QStandardPaths::writableLocation(QStandardPaths::DataLocation)</code>

To store cache files (these files can be removed at any time by the
system if disk space is low, and these files are not guaranteed to
be backed up), use the location returned by
<code>QStandardPaths::writableLocation(QStandardPaths::CacheLocation)</codE>

You can also use the Qt Quick Local Storage API to store data directly
from your QML-only Sailfish Application. libsailfishapp will make sure
that your application uses a application-specific storage directory.
